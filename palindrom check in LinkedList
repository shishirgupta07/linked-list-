import java.util.*;

class Main {
    public static class ListNode {
        int val = 0;
        ListNode next = null;

        ListNode(int val) {
            this.val = val;
        }
    }
    public static ListNode mid(ListNode head)
    {
        if(head==null || head.next==null) return head;
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public static ListNode reverse(ListNode head)
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        ListNode pre=null;
        ListNode cur=head;
        ListNode nxt=null;
        while(cur!=null)
        {
            nxt=cur.next;
            cur.next=pre;
            pre=cur;
            cur=nxt;
        }
        return pre;
    }

    public static boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)
        {
            return true;
        }
        ListNode m=mid(head);
        
        ListNode nhead=m.next;
         m.next=null;
        nhead=reverse(nhead);
       
        ListNode c1=head;
        ListNode c2=nhead;
        boolean ans=true;
        while(c2!=null)
        {
            if(c1.val!=c2.val)
            {
           ans=false;
           break;
            }
            c1=c1.next;
            c2=c2.next;
        }
        //ListNode mi=mid(head);
        ListNode re=reverse(head);
        m.next=re;
        return ans;
    }

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while (n-- > 0) {
            prev.next = new ListNode(scn.nextInt());
            prev = prev.next;
        }

        System.out.println(isPalindrome(dummy.next));
    }
}
