/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public static ListNode merge(ListNode list1,ListNode list2)
    {
        if(list1==null)
        {
            return list2;
        }
        if(list2==null)
        {
            return list1;
        }
        ListNode dummy=new ListNode(0);
        ListNode ans=dummy;
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                ans.next=list1;
                list1=list1.next;
                ans=ans.next;
            }
            else
            {
                ans.next=list2;
                list2=list2.next;
                ans=ans.next;
            }
            
        }
       while(list1!=null)
       {
           ans.next=list1;
           list1=list1.next;
           ans=ans.next;
       }
         while(list2!=null)
       {
           ans.next=list2;
           list2=list2.next;
           ans=ans.next;
       }
        return dummy.next;
    }
    public ListNode mergeKLists(ListNode lists[],int si,int ei)
    {
        int  mid=(si+ei)/2;
        if(si>ei) return null;
        if(si==ei) return lists[si];
        ListNode l1=mergeKLists(lists,si,mid);
        ListNode l2=mergeKLists(lists,mid+1,ei);
       return  merge(l1,l2);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0) return null;
        return mergeKLists(lists,0,lists.length-1);
    }
}
